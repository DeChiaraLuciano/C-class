using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Memory
{
    public partial class boardForm : Form
    {
        public boardForm()
        {
            InitializeComponent();
        }

        #region Instance Variables
        const int NOT_PICKED_YET = -1, numCards = 20;

        int firstCardNumber = NOT_PICKED_YET;
        int secondCardNumber = NOT_PICKED_YET;
        int matches = 0;
        #endregion

        #region Methods

        // This method finds a picture box on the board based on it's number (1 - 20)
        // It takes an integer as it's parameter and returns the picture box controls
        // that's name contains that number
        private PictureBox GetCard(int i)
        {
            PictureBox card = (PictureBox)this.Controls["card" + i];
            return card;
        }

        // This method gets the filename for the image displayed in a picture box given it's number
        // It takes an integer as it's parameter and returns a string containing the 
        // filename for the image in the corresponding picture box
        private string GetCardFilename(int i)
        {
            return GetCard(i).Tag.ToString();
        }

        // This method changes the filename for a given picture box
        // It takes an integer and a string that represents a filename as it's parameters
        // It doesn't return a value but stores the filename for the image to be displayed
        // in the picture box.  It doesn't actually display the new image
        private void SetCardFilename(int i, string filename)
        {
            GetCard(i).Tag = filename;
        }

        // These 2 methods get the value (and suit) of the card in a given picturebox
        // Both methods take an integer as the parameter and return a string
        private string GetCardValue(int index)
        {
            return GetCardFilename(index).Substring(4, 1);
        }

        private string GetCardSuit(int index)
        {
            return GetCardFilename(index).Substring(5, 1);
        }

        // TODO:  students should write this one
        private bool IsMatch(int index1, int index2)
        {
            return (GetCardValue(index1) == GetCardValue(index2));
        }

        // This method fills each picture box with a filename
        private void FillCardFilenames()
        {
            string[] values = { "a", "2", "j", "q", "k" };
            string[] suits = { "c", "d", "h", "s" };
            int i = 1;

            for (int suit = 0; suit <= 3; suit++)
            {
                for (int value = 0; value <= 4; value++)
                {
                    SetCardFilename(i, "card" + values[value] + suits[suit] + ".jpg");
                    i++;
                }
            }
        }

        // This should shuffle out the cards and place them randomly on the board
        private void ShuffleCards()
        {
            Random rand = new Random();

            for (int i = 1; i <= numCards; i++)
            {
                PictureBox card1 = GetCard(i);

                string card1FileName = GetCardFilename(i);

                int randInt = rand.Next(i, (numCards + 1));

                PictureBox card2 = GetCard(randInt);

                SetCardFilename(i, GetCardFilename(randInt));

                SetCardFilename(randInt, card1FileName);
            }

        }

        // This method loads (shows) an image in a picture box.  Assumes that filenames
        // have been filled in an earlier call to FillCardFilenames
        private void LoadCard(int i)
        {
            PictureBox card = GetCard(i);
            card.Image = Image.FromFile(System.Environment.CurrentDirectory + "\\Cards\\" + GetCardFilename(i));
        }

        // This method loads the image for the back of a card in a picture box
        private void LoadCardBack(int i)
        {
            PictureBox card = GetCard(i);
            card.Image = Image.FromFile(System.Environment.CurrentDirectory + "\\Cards\\black_back.jpg");
        }

        // TODO:  students should write all of these
        // shows (loads) the backs of all of the cards
        private void LoadAllCardBacks()
        {
            for (int i = 1; i <= numCards; i++)
            {
                LoadCardBack(i);
            }

        }

        // Hides a picture box
        private void HideCard(int i)
        {
            PictureBox card = GetCard(i);
            card.Visible = false;
        }
        //uses the hide individual card repeatedly until all cards are hidden.
        private void HideAllCards()
        {
            for (int i = 1; i <= numCards; i++)
            {
                HideCard(i);
            }
        }

        // opposite of hidecard
        private void ShowCard(int i)
        {
            PictureBox card = GetCard(i);

            card.Visible = true;
        }
        //see above
        private void ShowAllCards()
        {
            for (int i = 1; i <= numCards; i++)
            {
                ShowCard(i);
            }
        }

        // disables a picture box so you can't accidentally click on a hidden one.
        private void DisableCard(int i)
        {
            PictureBox card = GetCard(i);

            card.Click -= new System.EventHandler(this.card_Click);
        }

        private void DisableAllCards()
        {
            for (int i = 1; i <= numCards; i++)
            {
                DisableCard(i);
            }
        }
        //opposite of disable
        private void EnableCard(int i)
        {
            PictureBox card = GetCard(i);

            card.Click += new System.EventHandler(this.card_Click);
        }

        private void EnableAllCards()
        {
            for (int i = 1; i <= numCards; i++)
            {
                EnableCard(i);
            }
        }
        // works like enable all, but only if card is visible
        private void EnableAllVisibleCards()
        {
            for (int i = 1; i <= numCards; i++)
            {
                if (GetCard(i).Visible)
                {
                    EnableCard(i);
                }
            }
        }

        #endregion

        #region EventHandlers
        private void boardForm_Load(object sender, EventArgs e)
        {
            FillCardFilenames();
            ShuffleCards();
            LoadAllCardBacks();
            EnableAllCards();
            //should get the board working. Randomizes the cards and 
            //allows them all to be clicked properly.

        }
        //I had trouble getting this working so I got info on how a classmate set it up.
        //I think they did a pretty good job, and it seems to work without problems
        //so I just kept it as is
        //will consider trying to rework it a bit in future attempts
        //Right now it sets first card to be picked and then waits
        //as you select your second cards.
        //when second card is picked, it functions the same way
        //but only if you have already selected the first card.
        private void card_Click(object sender, EventArgs e)
        {
            PictureBox card = (PictureBox)sender;
            int cardNumber = int.Parse(card.Name.Substring(4));

            if (firstCardNumber == NOT_PICKED_YET)
            {
                DisableCard(cardNumber);

                firstCardNumber = cardNumber;

                LoadCard(cardNumber);
            }
            else if ((firstCardNumber != cardNumber) && (secondCardNumber == NOT_PICKED_YET))
            {
                DisableAllCards();

                secondCardNumber = cardNumber;

                LoadCard(cardNumber);

                flipTimer.Start();
            }



        }
        //I liked the way a classmate had this set up
        //which was to use a form level variable as a sort of 
        //counter to determine when the game was over.
        //this way you would be able to determine if the game was 
        //over even if you added more cards to the game
        //or removed some. You would only have to change
        //the numCards variable and matches would serve as a counter.
        private void flipTimer_Tick(object sender, EventArgs e)
        {
            flipTimer.Stop();

            if (IsMatch(firstCardNumber, secondCardNumber))
            {
                //the classmate had it as matches +=1, but I think ++ just looks better
                matches++;

                HideCard(firstCardNumber);

                HideCard(secondCardNumber);

                if (matches == (numCards / 2))
                {
                    MessageBox.Show("Congratulations! You found all the matches!");

                    ShuffleCards();

                    LoadAllCardBacks();

                    EnableAllCards();

                    ShowAllCards();

                    matches = 0;
                }
                else
                {
                    EnableAllVisibleCards();
                }
            }
            else
            {
                LoadCardBack(firstCardNumber);

                LoadCardBack(secondCardNumber);

                EnableAllVisibleCards();
            }

            firstCardNumber = NOT_PICKED_YET;

            secondCardNumber = NOT_PICKED_YET;
        }
        #endregion
    }
}
